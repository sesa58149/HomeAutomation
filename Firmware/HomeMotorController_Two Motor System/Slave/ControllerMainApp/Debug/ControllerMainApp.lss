
ControllerMainApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000013a  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  000001d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000316  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017b  00000000  00000000  00000566  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f5  00000000  00000000  000006e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ff  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012f  00000000  00000000  00000c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000d8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e3       	ldi	r30, 0x3A	; 58
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 36       	cpi	r26, 0x65	; 101
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	54 d0       	rcall	.+168    	; 0x102 <main>
  5a:	6d c0       	rjmp	.+218    	; 0x136 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <app_delay_ms>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5e:	e7 ea       	ldi	r30, 0xA7	; 167
  60:	f1 e6       	ldi	r31, 0x61	; 97
  62:	31 97       	sbiw	r30, 0x01	; 1
  64:	f1 f7       	brne	.-4      	; 0x62 <app_delay_ms+0x4>
  66:	00 c0       	rjmp	.+0      	; 0x68 <app_delay_ms+0xa>
  68:	00 00       	nop
void app_delay_ms(unsigned short delay)
{
	do
	{
		_delay_ms(100);
		delay-=100;
  6a:	84 56       	subi	r24, 0x64	; 100
  6c:	91 09       	sbc	r25, r1
	}while(delay >100);
  6e:	85 36       	cpi	r24, 0x65	; 101
  70:	91 05       	cpc	r25, r1
  72:	a8 f7       	brcc	.-22     	; 0x5e <app_delay_ms>
	
}
  74:	08 95       	ret

00000076 <handleInputPins>:

void handleInputPins(unsigned char led_input)
{
	static unsigned char firstTime = 1;	
	unsigned char SensorIn;
	unsigned char val = (PORTC & INPUT_LED_STATUS_PIN_MASK);
  76:	95 b3       	in	r25, 0x15	; 21
  78:	93 7e       	andi	r25, 0xE3	; 227
	led_input &= INPUT_PIN_MASK; // PD5,PD6,PD7  yyy0 0000
  7a:	80 7e       	andi	r24, 0xE0	; 224
	led_input >>=0x03; // shift till PC2
  7c:	86 95       	lsr	r24
  7e:	86 95       	lsr	r24
  80:	86 95       	lsr	r24
	if( (led_input != last_input)||(firstTime ==1) )
  82:	20 91 64 00 	lds	r18, 0x0064
  86:	82 13       	cpse	r24, r18
  88:	04 c0       	rjmp	.+8      	; 0x92 <handleInputPins+0x1c>
  8a:	20 91 60 00 	lds	r18, 0x0060
  8e:	21 30       	cpi	r18, 0x01	; 1
  90:	b9 f4       	brne	.+46     	; 0xc0 <handleInputPins+0x4a>
	{
		firstTime = 0;	
  92:	10 92 60 00 	sts	0x0060, r1
		last_input = led_input;	
  96:	80 93 64 00 	sts	0x0064, r24
		PORTC = (val |led_input);
  9a:	98 2b       	or	r25, r24
  9c:	95 bb       	out	0x15, r25	; 21
		SensorIn= led_input>> 0x02; // move to PC0
  9e:	86 95       	lsr	r24
  a0:	86 95       	lsr	r24
		SensorIn &= 0x07; //only 2 input PD5,PD6 &(PD7 driven from master)
		
		/* PD7 high= no water in sump ans stop motor to avoid dry run */ 
		
		if( (SensorIn & 0x04) == 0x04) // no water in sump stop the motor to avoid dry run
  a2:	98 2f       	mov	r25, r24
  a4:	94 70       	andi	r25, 0x04	; 4
  a6:	11 f0       	breq	.+4      	; 0xac <handleInputPins+0x36>
		{
			CNTRL_MOTOR0_OFF();
  a8:	a8 98       	cbi	0x15, 0	; 21
  aa:	08 95       	ret
	{
		firstTime = 0;	
		last_input = led_input;	
		PORTC = (val |led_input);
		SensorIn= led_input>> 0x02; // move to PC0
		SensorIn &= 0x07; //only 2 input PD5,PD6 &(PD7 driven from master)
  ac:	87 70       	andi	r24, 0x07	; 7
		
		if( (SensorIn & 0x04) == 0x04) // no water in sump stop the motor to avoid dry run
		{
			CNTRL_MOTOR0_OFF();
		}
		else if(SensorIn == 0x00) // no water--- input high->close ckt-- current flow--VCE--0v-- PDxyz->low (HighLevel=0 LowLevel=0 )
  ae:	29 f4       	brne	.+10     	; 0xba <handleInputPins+0x44>
		{			
			CNTRL_MOTOR0_ON();
  b0:	a8 9a       	sbi	0x15, 0	; 21
			app_delay_ms(2000);			
  b2:	80 ed       	ldi	r24, 0xD0	; 208
  b4:	97 e0       	ldi	r25, 0x07	; 7
  b6:	d3 df       	rcall	.-90     	; 0x5e <app_delay_ms>
  b8:	08 95       	ret
		}
		
		else if(SensorIn == 0x03) // full water--- input low->open ckt-- current blocked --VCE--5v-- PDxyz->high (HighLevel=1 LowLevel=1 )
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	09 f4       	brne	.+2      	; 0xc0 <handleInputPins+0x4a>
		{			
			CNTRL_MOTOR0_OFF();
  be:	a8 98       	cbi	0x15, 0	; 21
  c0:	08 95       	ret

000000c2 <handleManualStart>:
	}	
}

void handleManualStart()
{
	unsigned char val = (PINB & 0x01);
  c2:	86 b3       	in	r24, 0x16	; 22
  c4:	81 70       	andi	r24, 0x01	; 1
	static unsigned char pinDebounce=0;
	static unsigned char lastVal =0;
	
	if(lastVal != val)
  c6:	90 91 63 00 	lds	r25, 0x0063
  ca:	98 17       	cp	r25, r24
  cc:	21 f0       	breq	.+8      	; 0xd6 <handleManualStart+0x14>
	{
		pinDebounce = 0;
  ce:	10 92 62 00 	sts	0x0062, r1
		lastVal = val;
  d2:	80 93 63 00 	sts	0x0063, r24
	}
	if( val == 0x00 && pinDebounce == 0 )
  d6:	81 11       	cpse	r24, r1
  d8:	13 c0       	rjmp	.+38     	; 0x100 <handleManualStart+0x3e>
  da:	80 91 62 00 	lds	r24, 0x0062
  de:	81 11       	cpse	r24, r1
  e0:	0f c0       	rjmp	.+30     	; 0x100 <handleManualStart+0x3e>
	{		
		lastVal = val;
  e2:	10 92 63 00 	sts	0x0063, r1
		val = (PIND & 0xE0);		/* PD7th bit master control */ 		
  e6:	80 b3       	in	r24, 0x10	; 16
  e8:	98 2f       	mov	r25, r24
  ea:	90 7e       	andi	r25, 0xE0	; 224
			
		if((PIND & 0x60) != 0x60)   /*pd6,5 must be not be 11	-- tank already full */
  ec:	80 b3       	in	r24, 0x10	; 16
  ee:	80 76       	andi	r24, 0x60	; 96
  f0:	80 36       	cpi	r24, 0x60	; 96
  f2:	31 f0       	breq	.+12     	; 0x100 <handleManualStart+0x3e>
		{
			
			if( (val & 0x80) == 0)	/* start motor only if sump have water to avoid dry run*/
  f4:	99 23       	and	r25, r25
  f6:	0c f0       	brlt	.+2      	; 0xfa <handleManualStart+0x38>
			{
				CNTRL_MOTOR0_ON();
  f8:	a8 9a       	sbi	0x15, 0	; 21
				//while(1);	
			}		
			pinDebounce = 1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 62 00 	sts	0x0062, r24
 100:	08 95       	ret

00000102 <main>:
*/

int main(void)
{
	/* OUTPUT PINS*/
	DDRC |= ( (1<< MODULE_STATUS_PIN)|(1<< CNTRL_MOTOR0)|(1<<CNTRL_MOTOR1) |(1<<INPUT_LED_STATUS_PIN0)|(1<<INPUT_LED_STATUS_PIN1) |(1<< INPUT_LED_STATUS_PIN2)  );
 102:	84 b3       	in	r24, 0x14	; 20
 104:	8f 63       	ori	r24, 0x3F	; 63
 106:	84 bb       	out	0x14, r24	; 20
	
	/* INPUT PINS*/
	DDRD &= ~( (1<<INPUT_PIN_LOW_LEVEL) | (1<<INPUT_PIN_MIDDLE_LEVEL) | (1<<INPUT_PIN_HIGH_LEVEL) );
 108:	81 b3       	in	r24, 0x11	; 17
 10a:	8f 71       	andi	r24, 0x1F	; 31
 10c:	81 bb       	out	0x11, r24	; 17
	
	/* Manual Motor start PB0 input	*/
	DDRB &=~(1<<MASTER_MANUAL_START);
 10e:	b8 98       	cbi	0x17, 0	; 23
	/* Set the pull-up register for input bit*/
	PORTB|=(1<<MASTER_MANUAL_START);
 110:	c0 9a       	sbi	0x18, 0	; 24
	
	/* Set the pull-up register for input port*/
	PORTD=INPUT_LINE;
 112:	80 ef       	ldi	r24, 0xF0	; 240
 114:	82 bb       	out	0x12, r24	; 18
		
	/* Configure default motor as off */
	CNTRL_MOTOR0_OFF();
 116:	a8 98       	cbi	0x15, 0	; 21
	CNTRL_MOTOR1_OFF();
 118:	a9 98       	cbi	0x15, 1	; 21
	LED_STATUS_OFF();
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	8c 61       	ori	r24, 0x1C	; 28
 11e:	85 bb       	out	0x15, r24	; 21
	while(1)
	{
		handleManualStart();
		handleInputPins(PIND);
		app_delay_ms(1000);
		PORTC ^= (1<< MODULE_STATUS_PIN); // led on	
 120:	c0 e2       	ldi	r28, 0x20	; 32
	CNTRL_MOTOR1_OFF();
	LED_STATUS_OFF();
		
	while(1)
	{
		handleManualStart();
 122:	cf df       	rcall	.-98     	; 0xc2 <handleManualStart>
		handleInputPins(PIND);
 124:	80 b3       	in	r24, 0x10	; 16
 126:	a7 df       	rcall	.-178    	; 0x76 <handleInputPins>
		app_delay_ms(1000);
 128:	88 ee       	ldi	r24, 0xE8	; 232
 12a:	93 e0       	ldi	r25, 0x03	; 3
 12c:	98 df       	rcall	.-208    	; 0x5e <app_delay_ms>
		PORTC ^= (1<< MODULE_STATUS_PIN); // led on	
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	8c 27       	eor	r24, r28
 132:	85 bb       	out	0x15, r24	; 21
 134:	f6 cf       	rjmp	.-20     	; 0x122 <main+0x20>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
