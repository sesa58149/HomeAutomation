
ControllerMainApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000174  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  0000020a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003be  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000165  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000201  00000000  00000000  000007ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000009b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000335  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c2  00000000  00000000  00000d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000f2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e7       	ldi	r30, 0x74	; 116
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 36       	cpi	r26, 0x65	; 101
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	70 d0       	rcall	.+224    	; 0x13a <main>
  5a:	8a c0       	rjmp	.+276    	; 0x170 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <app_delay_ms>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5e:	e7 ea       	ldi	r30, 0xA7	; 167
  60:	f1 e6       	ldi	r31, 0x61	; 97
  62:	31 97       	sbiw	r30, 0x01	; 1
  64:	f1 f7       	brne	.-4      	; 0x62 <app_delay_ms+0x4>
  66:	00 c0       	rjmp	.+0      	; 0x68 <app_delay_ms+0xa>
  68:	00 00       	nop
void app_delay_ms(unsigned short delay)
{
	do
	{
		_delay_ms(100);
		delay-=100;
  6a:	84 56       	subi	r24, 0x64	; 100
  6c:	91 09       	sbc	r25, r1
	}while(delay >100);
  6e:	85 36       	cpi	r24, 0x65	; 101
  70:	91 05       	cpc	r25, r1
  72:	a8 f7       	brcc	.-22     	; 0x5e <app_delay_ms>
	
}
  74:	08 95       	ret

00000076 <handleInputPins>:

void handleInputPins(unsigned char led_input)
{
	static unsigned char firstTime = 1;	
	unsigned char SensorIn;
	unsigned char val = (PORTC & INPUT_LED_STATUS_PIN_MASK);
  76:	95 b3       	in	r25, 0x15	; 21
  78:	93 7e       	andi	r25, 0xE3	; 227
	led_input &= INPUT_PIN_MASK; // PD5,PD6  0yy0 0000 PD7 used in manual start bit
  7a:	80 7e       	andi	r24, 0xE0	; 224
	led_input >>=0x03; // shift till PC2
  7c:	86 95       	lsr	r24
  7e:	86 95       	lsr	r24
  80:	86 95       	lsr	r24
	if( ( led_input != last_input)||(firstTime ==1) )
  82:	20 91 64 00 	lds	r18, 0x0064
  86:	82 13       	cpse	r24, r18
  88:	04 c0       	rjmp	.+8      	; 0x92 <handleInputPins+0x1c>
  8a:	20 91 60 00 	lds	r18, 0x0060
  8e:	21 30       	cpi	r18, 0x01	; 1
  90:	29 f5       	brne	.+74     	; 0xdc <handleInputPins+0x66>
	{
		firstTime = 0;	
  92:	10 92 60 00 	sts	0x0060, r1
		last_input = led_input;	
  96:	80 93 64 00 	sts	0x0064, r24
		PORTC = (val |led_input);
  9a:	98 2b       	or	r25, r24
  9c:	95 bb       	out	0x15, r25	; 21
		SensorIn= led_input>> 0x02; // move to PC0
  9e:	86 95       	lsr	r24
  a0:	86 95       	lsr	r24
		SensorIn &= 0x03; //only 2 input PD5&PD6 
  a2:	83 70       	andi	r24, 0x03	; 3
		
		if(SensorIn == 0x00) // no water--- input high->close ckt-- current flow--VCE--0v-- PDxyz->low (HighLevel=0 LowLevel=0 )
  a4:	59 f4       	brne	.+22     	; 0xbc <handleInputPins+0x46>
		{
			CNTRL_MOTOR1_ON();
  a6:	a9 9a       	sbi	0x15, 1	; 21
			app_delay_ms(500);
  a8:	84 ef       	ldi	r24, 0xF4	; 244
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	d8 df       	rcall	.-80     	; 0x5e <app_delay_ms>
			CNTRL_MOTOR0_ON();
  ae:	a8 9a       	sbi	0x15, 0	; 21
			app_delay_ms(2000);
  b0:	80 ed       	ldi	r24, 0xD0	; 208
  b2:	97 e0       	ldi	r25, 0x07	; 7
  b4:	d4 df       	rcall	.-88     	; 0x5e <app_delay_ms>
			CNTRL_MOTOR0_OFF();			
  b6:	a8 98       	cbi	0x15, 0	; 21
			
			MASTER_OUT_SLAVE_DISABLE();
  b8:	c0 98       	cbi	0x18, 0	; 24
  ba:	08 95       	ret
		}
		
		else if(SensorIn == 0x03) // full water--- input low->open ckt-- current blocked --VCE--5v-- PDxyz->high (HighLevel=1 LowLevel=1 )
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	39 f4       	brne	.+14     	; 0xce <handleInputPins+0x58>
		{
			CNTRL_MOTOR1_OFF();
  c0:	a9 98       	cbi	0x15, 1	; 21
			app_delay_ms(500);
  c2:	84 ef       	ldi	r24, 0xF4	; 244
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	cb df       	rcall	.-106    	; 0x5e <app_delay_ms>
			CNTRL_MOTOR0_OFF();
  c8:	a8 98       	cbi	0x15, 0	; 21
			MASTER_OUT_SLAVE_ENABLE();
  ca:	c0 9a       	sbi	0x18, 0	; 24
  cc:	08 95       	ret
		}
		else if(SensorIn == 0x01) 
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	11 f4       	brne	.+4      	; 0xd6 <handleInputPins+0x60>
		{
			MASTER_OUT_SLAVE_ENABLE();
  d2:	c0 9a       	sbi	0x18, 0	; 24
  d4:	08 95       	ret
		}
		else if(SensorIn == 0x02) 
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	09 f4       	brne	.+2      	; 0xdc <handleInputPins+0x66>
		{
			MASTER_OUT_SLAVE_ENABLE();
  da:	c0 9a       	sbi	0x18, 0	; 24
  dc:	08 95       	ret

000000de <handleManualStart>:
	}	
}

void handleManualStart(unsigned char inPort)
{
	unsigned char maualStartBit =  ( (inPort & 0x80) >> 7); // PD7 is manual start bit 
  de:	28 2f       	mov	r18, r24
  e0:	22 1f       	adc	r18, r18
  e2:	22 27       	eor	r18, r18
  e4:	22 1f       	adc	r18, r18
	static unsigned char pinDebounce=0;
	static unsigned char lastVal =0;
	unsigned char ledPin = (PORTC & ~0x10); //pc4 = pd7
  e6:	35 b3       	in	r19, 0x15	; 21
	PORTC = (ledPin| ((inPort & 0x80) >> 0x03) ); 
  e8:	80 78       	andi	r24, 0x80	; 128
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	95 95       	asr	r25
  ee:	87 95       	ror	r24
  f0:	95 95       	asr	r25
  f2:	87 95       	ror	r24
  f4:	95 95       	asr	r25
  f6:	87 95       	ror	r24
void handleManualStart(unsigned char inPort)
{
	unsigned char maualStartBit =  ( (inPort & 0x80) >> 7); // PD7 is manual start bit 
	static unsigned char pinDebounce=0;
	static unsigned char lastVal =0;
	unsigned char ledPin = (PORTC & ~0x10); //pc4 = pd7
  f8:	93 2f       	mov	r25, r19
  fa:	9f 7e       	andi	r25, 0xEF	; 239
	PORTC = (ledPin| ((inPort & 0x80) >> 0x03) ); 
  fc:	89 2b       	or	r24, r25
  fe:	85 bb       	out	0x15, r24	; 21
	
	if(lastVal != maualStartBit)
 100:	80 91 63 00 	lds	r24, 0x0063
 104:	82 17       	cp	r24, r18
 106:	21 f0       	breq	.+8      	; 0x110 <handleManualStart+0x32>
	{
		pinDebounce = 0;
 108:	10 92 62 00 	sts	0x0062, r1
		lastVal = maualStartBit;
 10c:	20 93 63 00 	sts	0x0063, r18
	}
	
	if( maualStartBit == 0x00 )
 110:	21 11       	cpse	r18, r1
 112:	12 c0       	rjmp	.+36     	; 0x138 <handleManualStart+0x5a>
	{
		if( pinDebounce == 0 )
 114:	80 91 62 00 	lds	r24, 0x0062
 118:	81 11       	cpse	r24, r1
 11a:	0e c0       	rjmp	.+28     	; 0x138 <handleManualStart+0x5a>
		{
			
			CNTRL_MOTOR1_ON();
 11c:	a9 9a       	sbi	0x15, 1	; 21
			app_delay_ms(500);
 11e:	84 ef       	ldi	r24, 0xF4	; 244
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	9d df       	rcall	.-198    	; 0x5e <app_delay_ms>
			CNTRL_MOTOR0_ON();
 124:	a8 9a       	sbi	0x15, 0	; 21
			app_delay_ms(2000);
 126:	80 ed       	ldi	r24, 0xD0	; 208
 128:	97 e0       	ldi	r25, 0x07	; 7
 12a:	99 df       	rcall	.-206    	; 0x5e <app_delay_ms>
			CNTRL_MOTOR0_OFF();
 12c:	a8 98       	cbi	0x15, 0	; 21
			lastVal = maualStartBit;
 12e:	10 92 63 00 	sts	0x0063, r1
			pinDebounce = 1;			
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 62 00 	sts	0x0062, r24
 138:	08 95       	ret

0000013a <main>:

int main(void)
{
	unsigned char level_input = 0;
	/* OUTPUT PINS*/
	DDRC |= ( (1<< MODULE_STATUS_PIN)|(1<< CNTRL_MOTOR0)|(1<<CNTRL_MOTOR1) |(1<<INPUT_LED_STATUS_PIN0)|(1<<INPUT_LED_STATUS_PIN1) |(1<< INPUT_LED_STATUS_PIN2)  );
 13a:	84 b3       	in	r24, 0x14	; 20
 13c:	8f 63       	ori	r24, 0x3F	; 63
 13e:	84 bb       	out	0x14, r24	; 20
	
	/* INPUT PINS*/
	DDRD &= ~( (1<<INPUT_PIN_LOW_LEVEL) | (1<<INPUT_PIN_MIDDLE_LEVEL) | (1<<INPUT_PIN_HIGH_LEVEL) );
 140:	81 b3       	in	r24, 0x11	; 17
 142:	8f 71       	andi	r24, 0x1F	; 31
 144:	81 bb       	out	0x11, r24	; 17
	
	/* Salve control bit PB0-- out put */
	DDRB |=(1<<MASTER_OUT_SLAVE_ENABLE_BIT);
 146:	b8 9a       	sbi	0x17, 0	; 23
	
		/* Set the pull-up register for input port*/
	PORTD=INPUT_LINE;
 148:	80 ef       	ldi	r24, 0xF0	; 240
 14a:	82 bb       	out	0x12, r24	; 18
		
	/* Configure default motor as off */
	CNTRL_MOTOR0_OFF();
 14c:	a8 98       	cbi	0x15, 0	; 21
	CNTRL_MOTOR1_OFF();
 14e:	a9 98       	cbi	0x15, 1	; 21
	LED_STATUS_OFF();
 150:	85 b3       	in	r24, 0x15	; 21
 152:	8c 61       	ori	r24, 0x1C	; 28
 154:	85 bb       	out	0x15, r24	; 21
	{
		level_input = PIND;
		handleManualStart(level_input);
		handleInputPins(level_input);
		app_delay_ms(1000);
		PORTC ^= (1<< MODULE_STATUS_PIN); // led on	
 156:	d0 e2       	ldi	r29, 0x20	; 32
	LED_STATUS_OFF();
	//setTimoutforShutOffMotor(15); // in Minutes
		
	while(1)
	{
		level_input = PIND;
 158:	c0 b3       	in	r28, 0x10	; 16
		handleManualStart(level_input);
 15a:	8c 2f       	mov	r24, r28
 15c:	c0 df       	rcall	.-128    	; 0xde <handleManualStart>
		handleInputPins(level_input);
 15e:	8c 2f       	mov	r24, r28
 160:	8a df       	rcall	.-236    	; 0x76 <handleInputPins>
		app_delay_ms(1000);
 162:	88 ee       	ldi	r24, 0xE8	; 232
 164:	93 e0       	ldi	r25, 0x03	; 3
 166:	7b df       	rcall	.-266    	; 0x5e <app_delay_ms>
		PORTC ^= (1<< MODULE_STATUS_PIN); // led on	
 168:	85 b3       	in	r24, 0x15	; 21
 16a:	8d 27       	eor	r24, r29
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	f4 cf       	rjmp	.-24     	; 0x158 <main+0x1e>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
